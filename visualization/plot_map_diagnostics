#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Plot map of diagnostics
#
# Qing Li, 20181107

import sys
import os
import argparse
sys.path.append(os.environ['GOTMWORK_ROOT']+'/tools', )
from gotmanalysis import *

# process the input arguments
parser = argparse.ArgumentParser(description="""
        Plot global map of diagnostics.\n
        Supported diagnostics:
            mld_deltaR_mean
            PE_delta """,
            formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('-c', '--casename', action='store', dest='cname',
        metavar='CASENAME', required=True, help='Case name')
parser.add_argument('-t', '--timetag', action='store', dest='ttag',
        metavar='TIMETAG', required=True, help='Time tag (yyyymmdd-yyyymmdd)')
parser.add_argument('-d', '--diagname', action='store', dest='diagname',
        metavar='DIAGNAME', required=True, help='Diagnostic name')
parser.add_argument('-U', '--updatedata', action='store_true', dest='l_update_data',
        help='Update data')
parser.add_argument('-P', '--plotfigure', action='store_true', dest='l_plot_figure',
        help='Plot figure')
# parsing arguments and save to args
args=parser.parse_args()

# timetag = '20090101-20090131'
# casename = 'COREII_Global'
casename = args.cname
timetag = args.ttag
var = args.diagname
update_data = args.l_update_data
plot_figure = args.l_plot_figure

# diagnostics
if var == 'mld_deltaR_mean':
    levels0 = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 110, 130, 150, 180, 210, 240, 280, 320, 360, 407, 454, 500]
    levels1 = [-90, -75, -60, -45, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 45, 60, 75, 90]
    fill_value = 499.5
elif var == 'PE_delta':
    levels0 = None
    levels1 = None
    fill_value = None
elif var == 'SST':
    levels0 = list(np.arange(31))
    levels1 = list((np.arange(21)-10)*0.1)
    fill_value = None
elif var == 'SSS':
    levels0 = None
    levels1 = None
    fill_value = None
else:
    print('Variable {} not supported. Stop.'.format(var))
    parser.print_help()
    sys.exit(1)

# paths
s1data_root = os.environ['GOTMRUN_ROOT']+'/'+casename+'/VR1m_DT600s_'+timetag
s2data_root = os.environ['GOTMFIG_ROOT']+'/data/'+casename+'/VR1m_DT600s_'+timetag
fig_root = os.environ['GOTMFIG_ROOT']+'/'+casename+'/VR1m_DT600s_'+timetag
os.makedirs(s2data_root, exist_ok=True)
os.makedirs(fig_root, exist_ok=True)

turbmethod_list = ['KPP-CVMix',
                   'KPP-ROMS',
                   'KPPLT-EFACTOR',
                   'KPPLT-ENTR',
                   'KPPLT-RWHGK',
                   'EPBL',
                   'EPBL-LT',
                   'SMC',
                   'SMCLT',
                   'K-EPSILON-SG',
                   'OSMOSIS']
legend_list = ['KPP-CVMix',
               'KPP-ROMS',
               'KPPLT-VR12',
               'KPPLT-LF17',
               'KPPLT-RWHGK16',
               'ePBL',
               'ePBL-LT',
               'SMC-KC94',
               'SMCLT-H15',
               'k-epsilon',
               'OSMOSIS']
nm = len(turbmethod_list)
irow_2col = [1, 2, 0, 1, 2, 3, 3, 4, 4, 5, 5]
icol_2col = [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1]
labels_2col = ['(b)', '(c)', '(g)', '(h)', '(i)', '(d)', '(j)', '(e)', '(k)','(f)','(l)']

# get diagnostics
for i in np.arange(nm):
    tmname = turbmethod_list[i]
    print(tmname)
    basepath = s1data_root+'/'+tmname
    s2data_name = s2data_root+'/data_'+var+'_'+tmname+'.npz'
    figname = fig_root+'/fig_'+var+'.png'
    if update_data or not os.path.isfile(s2data_name):
        # save data
        loclist = sorted(os.listdir(basepath))
        pathlist = [basepath+'/'+x+'/gotm_out_s1.nc' for x in loclist]
        godmobj = GOTMOutputDataMap(pathlist)
        gmobj = godmobj.diagnostics(var, fillvalue=fill_value)
        gmobj.save(s2data_name)
    else:
        # read data
        gmobj = GOTMMap().load(s2data_name)
    if i == 0:
        lon = gmobj.lon
        lat = gmobj.lat
        name = gmobj.name
        units = gmobj.units
        nloc = len(lon)
        darr = np.zeros([nm, nloc])
    darr[i,:] = gmobj.data

if plot_figure:
    # create figure
    nrow = (nm+2)//2
    fig_width = 12
    fig_height = 3+2*(nrow-1)

    # plot figure
    height_ratios = [1]*nrow
    height_ratios.append(0.15)
    width_ratios = [1, 1, 0.05]
    f, axarr = plt.subplots(nrow, 2, sharex='col')
    f.set_size_inches(fig_width, fig_height)

    # median
    gmdata_md = np.median(darr, axis=0)
    gmobj = GOTMMap(data=gmdata_md, lon=lon, lat=lat, name=name, units=units)
    im0 = gmobj.plot(axis=axarr[0,0], levels=levels0, add_colorbar=False)
    axarr[0,0].text(0.02, 0.94, '(a) Median', transform=axarr[0,0].transAxes,
                         fontsize=12, color='white', fontweight='bold', va='top')

    for i in np.arange(nm):
        # plot figure
        n = icol_2col[i]
        m = irow_2col[i]
        gmdata = darr[i,:] - gmdata_md
        gmobj = GOTMMap(data=gmdata, lon=lon, lat=lat, name=name, units=units)
        im1 = gmobj.plot(axis=axarr[m,n], levels=levels1, add_colorbar=False, cmap='RdBu_r')
        axarr[m,n].text(0.02, 0.94, labels_2col[i]+' '+legend_list[i], transform=axarr[m,n].transAxes,
                         fontsize=12, color='white', fontweight='bold', va='top')

    # reduce margin
    plt.tight_layout()

    # colorbar
    plt.subplots_adjust(right=0.95)
    cax0 = plt.axes([0.85, 0.55, 0.1, 0.4])
    cax0.set_visible(False)
    cb0 = plt.colorbar(im0, ax=cax0)
    cb0.formatter.set_powerlimits((-2, 3))
    cb0.update_ticks()
    cax1 = plt.axes([0.85, 0.05, 0.1, 0.4])
    cax1.set_visible(False)
    cb1 = plt.colorbar(im1, ax=cax1)
    cb1.formatter.set_powerlimits((-3, 3))
    cb1.update_ticks()

    # save figure
    plt.savefig(figname, dpi = 300)

