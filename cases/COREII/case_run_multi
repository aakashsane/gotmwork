#!/bin/bash
# Setup and run GOTM for CORE-II
# Loop over latitude and longitude
#
# Qing Li, 20180328

#######################################################################
#                              Set path                               #
#######################################################################

# root directory for gotmwork
workdir="${HOME}/models/gotm/gotmwork"

# scratch directory to run the case
scratchdir="${HOME}/scratch"

# setup paths and tools
source ${workdir}/set_tools.sh

# data directory
dataroot="/Users/qingli/data_local"
# dataroot="/Volumes/Qing_Work/data"

# input data - surface fluxes
datadir="${dataroot}/COREII_IAF"

# input data - waves
uspdir="${dataroot}/WAVEWATCH_COREII"
uspdata="ww3.2008-2009_usp.nc"
wavdir="${dataroot}/WAVEWATCH_COREII"
wavdata="ww3.2008-2009.nc"

# input data - Argo profiles for initialization
argodir="${dataroot}/obs/Argo"
argodata="WOD13_PFL_2000.nc"

# mask data
maskfile="${HOME}/data/mask/ww3_mask_1dx1d.nc"

#######################################################################
#                           Set parameters                            #
#######################################################################

# name of the dataset
title="COREII"

# set locations
maxdepth=400

# run parameters
dt=1800
nsave=6

# output file name
outname="gotm_out"

# starting and ending date - in the format of YYYYMMDD
datestart="20080601"
dateend="20091231"

# name of the turbulence model
# turbmethod="KPP-CVMix"
turbmethod="OSMOSIS"
# turbmethod="KPP-Original"

# flag for dry run
l_dry_run="no"

#######################################################################
#                         Loop over locations                         #
#######################################################################
lon_start=$1
lon_end=$2
# lon_start=2
# lon_end=360
dlon=4
lat_start=-70
lat_end=70
dlat=4

# start outer loop over lon
lon=${lon_start}
while [ ${lon} -le ${lon_end} ]; do
# start inner loop over lat
lat=${lat_start}
while [ ${lat} -le ${lat_end} ]; do

    # check if it is a sea point
    l_sea=$(${cmd_is_sea} -fmask ${maskfile} -lat ${lat} -lon ${lon})

    # skip if not a sea point
    if [ ${l_sea} == "yes" ]; then

        # case name
        casename="${title}_LAT${lat}_LON${lon}_${turbmethod}_${datestart}-${dateend}"

        # dry run first and check the availability of argo profiles
        ${cmd_nc2dat_argo} -i ${argodir}/${argodata} -lat ${lat} -lon ${lon} \
            -r 2 -ds ${datestart} -dr 20 -dry
        nstate=$?

        if [ ${l_dry_run} == "no" ]; then
            # print case name
            echo ${casename}

            # skip if no argo profile is available
            if [ $nstate == 1 ]; then
                echo "[case_run_multi] No Argo profile available. Skip."
                lat=$((${lat}+${dlat}))
                continue
            fi

            # create run directory
            rundir="${scratchdir}/${casename}"
            mkdir -p ${rundir}
            cd ${rundir}

            # set up namelists
            cp ${nmldir}/*.nml ./

            xmlfile=${title}.xml
            cp ${xmldir}/${xmlfile} ./
            sed -i.bk "s#_TAG_LAT#\"${lat}\"#g" ./${xmlfile}
            sed -i.bk "s#_TAG_LON#\"${lon}\"#g" ./${xmlfile}
            sed -i.bk "s#_TAG_MAXDEPTH#\"${maxdepth}\"#g" ./${xmlfile}

            # general setup for the surface fluxes
            ${cmd_case_preproc} -xml ${xmlfile} -root ${workdir} -data ${datadir} \
                -ds ${datestart} -de ${dateend} -method nc2dat_latlon
            ${cmd_nmlchange} -f gotmrun.nml -e title -v ${title}
            ${cmd_nmlchange} -f gotmrun.nml -e out_fn -v ${outname}
            ${cmd_nmlchange} -f gotmrun.nml -e dt -v ${dt}
            ${cmd_nmlchange} -f gotmrun.nml -e nsave -v ${nsave}

            # use meteo data instead of fluxes
            ${cmd_nmlchange} -f airsea.nml -e calc_fluxes -v .true.
            ${cmd_nmlchange} -f airsea.nml -e fluxes_method -v 2
            ${cmd_nmlchange} -f airsea.nml -e back_radiation_method -v 1

            # processing Stokes drift data
            ${cmd_nc2dat_core2ww3} -i ${uspdir}/${uspdata} -o "usp_file.dat" \
                -lat ${lat} -lon ${lon} -ds ${datestart} -de ${dateend} -usp
            ${cmd_nmlchange} -f obs.nml -e ustokes_method -v 3
            ${cmd_nmlchange} -f obs.nml -e nfreq -v 3
            ${cmd_nmlchange} -f obs.nml -e usp_file -v "usp_file.dat"

            # processing bulk wave parameter
            ${cmd_nc2dat_core2ww3} -i ${wavdir}/${wavdata} -o "wave_file.dat" \
                -lat ${lat} -lon ${lon} -ds ${datestart} -de ${dateend} \
                -v hs fp dir
            ${cmd_nmlchange} -f obs.nml -e wave_method -v 2
            ${cmd_nmlchange} -f obs.nml -e wave_file -v "wave_file.dat"

            # processing Argo data for initialization
            tprof_name="tprof_file.dat"
            sprof_name="sprof_file.dat"
            # ${cmd_nc2dat_argo} -i ${argodir}/${argodata} -lat ${lat} -lon ${lon} \
            #     -r 3 -ot ${tprof_name} -os ${sprof_name} \
            #     -ds ${datestart} -de ${dateend}
            ${cmd_nc2dat_argo} -i ${argodir}/${argodata} -lat ${lat} -lon ${lon} \
                -r 2 -ot ${tprof_name} -os ${sprof_name} \
                -ds ${datestart} -dr 20
            ${cmd_nmlchange} -f obs.nml -e t_prof_method -v 2
            ${cmd_nmlchange} -f obs.nml -e t_prof_file -v ${tprof_name}
            ${cmd_nmlchange} -f obs.nml -e s_prof_method -v 2
            ${cmd_nmlchange} -f obs.nml -e s_prof_file -v ${sprof_name}

            # set turbulence model
            case ${turbmethod} in
                "OSMOSIS")
                    ${cmd_nmlchange} -f gotmturb.nml -e turb_method -v 98
                    ;;
                "SMC")
                    ${cmd_nmlchange} -f gotmturb.nml -e turb_method -v 3
                    ;;
                "KPP-CVMix")
                    ${cmd_nmlchange} -f gotmturb.nml -e turb_method -v 99
                    ${cmd_nmlchange} -f kpp.nml -e lcvmix -v .true.
                    ;;
                "KPP-GOTM")
                    ${cmd_nmlchange} -f gotmturb.nml -e turb_method -v 99
                    ;;
                "KPPLT-EFACTOR")
                    ${cmd_nmlchange} -f gotmturb.nml -e turb_method -v 99
                    ${cmd_nmlchange} -f kpp.nml -e lcvmix -v .true.
                    ${cmd_nmlchange} -f kpp.nml -e langmuir_method -v 1
                    ${cmd_nmlchange} -f kpp.nml -e efactor_method -v 4
                    ;;
                "KPPLT-ENTR")
                    ${cmd_nmlchange} -f gotmturb.nml -e turb_method -v 99
                    ${cmd_nmlchange} -f kpp.nml -e lcvmix -v .true.
                    ${cmd_nmlchange} -f kpp.nml -e langmuir_method -v 2
                    ${cmd_nmlchange} -f kpp.nml -e efactor_method -v 4
                    ;;
                *)
                    echo "Turbulence method ${turbmethod} not supported. Stop."
                    exit 1
            esac

            # turn off bottom boundary layer
            ${cmd_nmlchange} -f kpp.nml -e kpp_bbl -v .false.

            # run GOTM
            gotm 2> log.${outname}

            # plot surface forcing and profiles
            # source ${scpt_case_postproc}
        fi # l_dry_run
    fi # l_sea

# end inner loop over lat
lat=$((${lat}+${dlat}))
done
# end outer loop over lon
lon=$((${lon}+${dlon}))
done

