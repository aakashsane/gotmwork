#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Qing Li, 20171217

import argparse
import datetime
import numpy as np
from netCDF4 import Dataset, num2date, date2index
from gotmtool import nctime_to_datetime, nctime_indices

def main():
    # process the input arguments
    parser = argparse.ArgumentParser(description="""
            Read a netCDF file and output variables in a text file in the GOTM
            input file format. Currently support time series of surface fluxes
            and time series of vertical profiles.""")
    parser.add_argument('-i', '--input', action='store', dest='fname_in',
            metavar='NCFILENAME', required=True, help='Input netCDF filename')
    parser.add_argument('-o', '--output', action='store', dest='fname_out',
            metavar='DATFILENAME', required=True, help='Output filename')
    parser.add_argument('-ds', '--date_start', action='store', dest='date_start',
            metavar='STARTDATE',
            help='Starting date of input data, in the format of YYYYMMDD')
    parser.add_argument('-de', '--date_end', action='store', dest='date_end',
            metavar='ENDDATE',
            help='Ending date of input data, in the format of YYYYMMDD')
    parser.add_argument('--version', action='version', version='%(prog)s: 1.0')
    # parsing arguments and save to args
    args=parser.parse_args()

    #  TODO: Check if input data exist <17-12-17, Qing Li> #
    fname_in = args.fname_in
    fname_out = args.fname_out
    date_start = args.date_start
    date_end = args.date_end

    # print out some message
    print('Converting {} to {}...'.format(fname_in, fname_out))

    # read data
    infile = Dataset(fname_in, 'r')
    # wave time
    nctime = infile.variables['waveTime']
    dttime = nctime_to_datetime(nctime) # time in datetime format
    # get starting and ending indices
    tidx_start, tidx_end = nctime_indices(nctime, date_start, date_end)
    tdat = [dttime[i].isoformat(' ', 'seconds')
            for i in range(tidx_start, tidx_end+1)] # truncated to seconds

    # band center frequency
    freq = infile.variables['waveFrequency'][:]
    # frequency bandwidth
    dfreq = infile.variables['waveBandwidth'][:]
    # band energy density
    spec = infile.variables['waveEnergyDensity'][:]
    # band mean direction that wave is coming from, in degree clockwise from the true North
    mdir = infile.variables['waveMeanDirection'][:]
    theta = 90.0-mdir # angle in degree counterclockwise from East
    d2r = np.pi/180.0
    xcmp = np.cos(theta*d2r)
    ycmp = np.sin(theta*d2r)
    # wave spectrum
    spec_h2 = spec*dfreq
    # Stokes drift spectrum
    spec_ustokes = xcmp*spec_h2*freq**3
    spec_vstokes = ycmp*spec_h2*freq**3
    # surface Stokes drift
    ustokes0 = np.sum(spec_ustokes,axis=1)
    vstokes0 = np.sum(spec_vstokes,axis=1)

    # write in file
    ddat = freq
    vdat = spec_h2[tidx_start:tidx_end+1,:]
    vdat2 = xcmp[tidx_start:tidx_end+1,:]
    vdat3 = ycmp[tidx_start:tidx_end+1,:]
    write_spec(fname_out, tdat, ddat, [vdat, vdat2, vdat3])

def write_spec(fnout, tdat, ddat, vdat):
    """Write wave spectrum for GOMT input.

    :fnout: (str) filename of output file
    :tdat: (list) array of time
    :ddat: (list) array of depth
    :vdat: (list) array of variables
    :returns: none

    """
    nt = len(tdat[:]) # size of time
    nd = len(ddat[:]) # size of depth
    up_down = 1 # 1: freq increasing with indicies
                # otherwise: freq decreasing with indicies
    with open(fnout, 'w') as fout:
        for i in range(nt):
            # time and dimension size
            out_str = '{}  {}  {}\n'.format(tdat[i], nd, up_down)
            fout.write(out_str)
            for j in range(nd):
                # depth
                out_str = '{:8.4e}'.format(ddat[j])
                # variables
                for var in vdat:
                    out_str += '  {:10.6e}'.format(var[i,j])
                # newline
                out_str += '\n'
                fout.write(out_str)

if __name__ == "__main__":
    main()
