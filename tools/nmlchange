#!/usr/bin/env python3
'''
Qing Li, 20171026
'''
import sys
import os
import re

def main():

    usage_str = '''Usage:
    {} [Namelist File] [Output File] [Namelist Name] [Variable] [Value]

    Query a variable in a namelist file and change its value.
    '''
    l_test = False
    scriptname = os.path.basename(sys.argv[0])
    # process input arguments
    nargs = len(sys.argv)
    if nargs != 6:
        print(usage_str.format(scriptname))
        sys.exit(1)
    nmlin = sys.argv[1]
    nmlout = sys.argv[2]
    nmlname = sys.argv[3]
    nmlvar = sys.argv[4]
    nmlvalue = sys.argv[5]

    # process input variable
    new_nmlvalue = string_nmlvalue(nmlvalue)
    # find if namelist in file
    re_var = nmlvar.strip()+' ='
    rec_info = ''
    with open(nmlin, 'r') as infile:
        for line in infile:
            #if line.strip() == '&'+nmlname:
            #    nmlname_found = line.strip()
            if re.search(re_var, line):
                [head, eq, str_val] = line.split()
                line = '   '+head+' '+eq+' '+new_nmlvalue+',\n'
            rec_info += line

    # write file
    with open(nmlout, 'w') as outfile:
        outfile.write(rec_info)

    # test
    if l_test:
        alltest = ['2', '2.', '2.45', '2e3', '2e-10', 'T', 'false', '.ture.', \
                   'Test', 'Flow', '2001-03-25 00:00:00', './']
        for stest in alltest:
            print('{} -> {}'.format(stest, string_nmlvalue(stest)))

def string_nmlvalue(data):
    '''
    This function process the input namelist value and return the formatted
    string for the namelist.
    '''
    re_int = r'^[0-9]+$'
    re_float = r'^[0-9]+\.[0-9]*$'
    re_exp = r'^[0-9]e[+-]*[0-9]+$'
    re_false = r'^[Ff]alse$|^\.false\.&'
    re_true = r'^[Tt]rue$|^\.true\.$'
    bool_str = {True: '.true.', False: '.false.'}

    if re.search(re_int, data):
        return data
    elif re.search(re_float, data):
        return data
    elif re.search(re_exp, data):
        return data
    elif re.search(re_true, data):
        return bool_str[True]
    elif re.search(re_false, data):
        return bool_str[False]
    else:
        return '\''+data+'\''

if __name__ == "__main__":
    main()
