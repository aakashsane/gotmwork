#!/usr/bin/env python3
"""
Qing Li, 20180310
"""
import sys
import argparse
import datetime
import numpy as np
from netCDF4 import Dataset
from gotmtool import get_value_lat_lon

def main():
    # process the input arguments
    parser = argparse.ArgumentParser(description="""
            Check if a point given by the latitude and longitude is a sea
            point.""")
    parser.add_argument('-fmask', '--mask_file', action='store', dest='fname_in',
            metavar='NCFILENAME', required=True, help='Input netCDF filename')
    parser.add_argument('-lat', '--latitude', action='store', dest='lat',
            metavar='LATITUDE', required=True,
            help='Latitude of the requested location (-90, 90)')
    parser.add_argument('-lon', '--longitude', action='store', dest='lon',
            metavar='LONGITUDE', required=True,
            help='Longitude of the requested location (0, 360)')
    parser.add_argument('--version', action='version', version='%(prog)s: 1.0')
    # parsing arguments and save to args
    args=parser.parse_args()

    # check input
    lon_f = float(args.lon)
    lat_f = float(args.lat)
    if lon_f < 0:
        lon_f = lon_f + 360.0

    if lon_f > 360 or lon_f < 0 or lat_f > 90 or lat_f < -90:
        parser.print_help()
        sys.exit(1)

    rlon = str(lon_f)
    rlat = args.lat

    # read netCDF file
    infile = Dataset(args.fname_in, 'r')
    varlist = infile.variables.keys()
    attlist = infile.ncattrs()


    # read latitude and longitude
    for vlat in ['lat', 'LAT', 'TLAT']:
        if vlat in varlist:
            lat = infile.variables[vlat][:]
            break

    for vlon in ['lon', 'LON', 'TLON', 'TLONG']:
        if vlon in varlist:
            lon = infile.variables[vlon][:]
            break

    if lat.ndim == 1 and lon.ndim == 1:
        lon2d, lat2d = np.meshgrid(lon, lat)
    elif lat.ndim == 2 and lon.ndim == 2:
        lat2d = lat
        lon2d = lon
    else:
        print('''Inconsistent dimensions of latitude (nlat = {}) and longitude
                (nlon = {}). Stop.'''.format(lat.ndim, lon.ndim))

    # check if valid sea point
    for rmask in ['REGION_MASK', 'region_mask', 'MASK', 'mask']:
        if rmask in varlist:
            region_mask = infile.variables[rmask][:]
            point_mask = get_value_lat_lon(region_mask, lat2d, lon2d, rlat, rlon)
            break

    if point_mask <= 0 or point_mask >=10:
        print('no')
        sys.exit(0)
    else:
        print('yes')
        sys.exit(0)

if __name__ == "__main__":
    main()
