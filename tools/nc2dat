#!/usr/bin/env python3
'''
Qing Li, 20171103
'''
import argparse
import datetime
from netCDF4 import Dataset, num2date, date2index

def main():
    # process the input arguments
    parser = argparse.ArgumentParser(description='''
            Read netCDF file and output variables in a GOTM input data file.''')
    parser.add_argument('-i', '--input', action='store', dest='fname_in',
            metavar='NCFILENAME', required=True, help='Input netCDF file name')
    parser.add_argument('-v', '--variable', action='store', dest='vname_in',
            metavar='VARNAME', required=True, nargs='+',
            help='Variable name in netCDF file, could be multiple variables')
    parser.add_argument('-o', '--output', action='store', dest='fname_out',
            metavar='DATFILENAME', required=True, help='output file name')
    parser.add_argument('-ds', '--date_start', action='store', dest='date_start',
            metavar='STARTDATE', required=True,
            help='Starting date of input data, in the format of YYYYMMDD')
    parser.add_argument('-de', '--date_end', action='store', dest='date_end',
            metavar='ENDDATE', required=True,
            help='Ending date of input data, in the format of YYYYMMDD')
    parser.add_argument('--version', action='version', version='%(prog)s: 1.0')
    # parsing arguments and save to args
    args=parser.parse_args()

    # read time dimension
    nctime = ncread(args.fname_in, 'time', valueonly=False)
    dttime = convert_nctime(nctime) # time in datetime format

    # get time range indices
    dt_start = datetime.datetime.strptime(args.date_start, '%Y%m%d')
    dt_end = datetime.datetime.strptime(args.date_end, '%Y%m%d')
    tidx_start, tidx_end = date2index([dt_start, dt_end], nctime)
    tdat = [dttime[i].isoformat(' ', 'seconds')
            for i in range(tidx_start, tidx_end)] # truncated to seconds
    nt = len(tdat[:])   # size of output time

    # read variables
    dat = []    # a list of arrays, an array for each variable
    for vname in args.vname_in:
        dat.append(ncread(args.fname_in, vname,
            tidxstart=tidx_start, tidxend=tidx_end))

    # write to output file
    with open(args.fname_out, 'w') as fout:
        for i in range(0, nt):
            # time
            out_str = '{}'.format(tdat[i])
            # variables
            for vdat in dat:
                out_str = out_str+'  {:6.2f}'.format(vdat[i])
            # newline
            out_str = out_str+'\n'
            fout.write(out_str)

def convert_nctime(nctime):
    '''
    Convert from nctime object to datetime object.
    '''
    t_units = nctime.units
    try :
        t_cal = nctime.calendar
    except AttributeError : # gregorian if attribute doesn't exist
        t_cal = 'gregorian'
    return num2date(nctime[:], units = t_units, calendar = t_cal)

def ncread(ncfile, *argv, valueonly=True, tidxstart=0, tidxend=-1):
    '''
    Read variables from a netCDF file.
    '''
    infile = Dataset(ncfile, 'r')
    nargv = len(argv)
    rdat = []
    if valueonly:
        for vname in argv:
            dat = infile.variables[vname]
            rdat.append(dat[tidxstart:tidxend,0,0,0])
    else:
        for vname in argv:
            dat = infile.variables[vname]
            rdat.append(dat)

    # return a list of arrays if more than one variable are requested
    if len(rdat) == 1:
        return rdat[0]
    else:
        return rdat

if __name__ == "__main__":
    main()
