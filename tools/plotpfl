#!/usr/bin/env python3
"""
Qing Li, 20171213
"""

import matplotlib.pyplot as plt
import numpy as np
import argparse
import sys
import datetime
from netCDF4 import Dataset, num2date
from gotmtool import *

def main():
    # process input arguments
    parser = argparse.ArgumentParser(description="""
        Plot time series of profile from GOTM together with the observation.""")
    parser.add_argument('-f', '--file', action='store', dest='fname',
            metavar='FILENAME', help='Input GOTM data')
    parser.add_argument('-v', '--variable', action='store', dest='vname',
            metavar='VARNAME', help='Variable name')
    parser.add_argument('-o', '--output', action='store', dest='fname_out',
            metavar='FIGNAME', help='Output figure name')
    parser.add_argument('-ptype', '--ptype', action='store', dest='ptype',
            help='Plot type, support pcolor (default), scatter and contourf.')
    parser.add_argument('-ds', '--date_start', action='store', dest='date_start',
            metavar='STARTDATE',
            help='Starting date of input data, in the format of YYYYMMDD')
    parser.add_argument('-de', '--date_end', action='store', dest='date_end',
            metavar='ENDDATE',
            help='Ending date of input data, in the format of YYYYMMDD')
    parser.add_argument('--version', action='version', version='%(prog)s: 1.0')
    # parsing arguments and save to args
    args = parser.parse_args()

    # check input
    if not args.fname or not args.vname:
        print('GOTM netCDF data, variable name, and output figure name are required. Stop.\n')
        parser.print_help()
        sys.exit(1)

    if not args.ptype:
        ptype = 'pcolor'
    elif args.ptype not in ['pcolor', 'scatter', 'contourf']:
        print('Plot type \'{}\' not supported'.format(args.ptype))
        parser.print_help()
        sys.exit(1)
    else:
        ptype = args.ptype

    # read data
    infile = Dataset(args.fname, 'r')
    varlist = infile.variables.keys()
    if 'time' in varlist:
        nctime = infile.variables['time']
    elif 'TIME' in varlist:
        nctime = infile.variables['TIME']
    else:
        print('Time dimension is required and should have the name \"time\" or \"TIME\"')

    # try to read missing_value if it exists
    try:
        mvalue = infile.missing_value
    except AttributeError:
        infile.set_auto_mask(False)
        mvalue = None

    # read variable
    ncvar = infile.variables[args.vname]

    # choose veritcal coordinate
    if 'z' in varlist:
        # GOTM output
        coord = ncvar.coordinates
        if 'zi' in coord:
            z = infile.variables['zi'][0,:,0,0]
        else:
            z = infile.variables['z'][0,:,0,0]
    elif 'depth' in varlist:
        # observation
        z = -abs(infile.variables['depth'][:])
    elif 'DEPTH' in varlist:
        # observation
        z = -abs(infile.variables['DEPTH'][:])
    else:
        print('Depth dimension is required and should have the name \"z\" or \"depth\" or \"DEPTH\"')

    # get starting and ending indices
    tidx_start, tidx_end = nctime_indices(nctime, args.date_start,
            args.date_end)

    # nctime -> datetime
    dttime = nctime_to_datetime(nctime, tidx_start, tidx_end)

    # read profile
    mdl = ncread_pfl(ncvar, tidx_start, tidx_end)
    if mdl is None:
        print('The variable {} has {} dimension, not supported'
                .format(ncvar.name, ncvar.ndim))
        sys.exit(1)

    # print some message
    print_dttime_range(dttime)

    # remove missing values if exist
    if not mvalue is None:
        mdl[np.where(mdl == mvalue)] = np.NaN
    # mask out NaN
    mdl = np.ma.array(mdl, mask=np.isnan(mdl))

    # get levels
    levels = set_levels(mdl)
    c_min = levels[0]
    c_max = levels[-1]
    # plot figure
    if ptype == 'contourf':
        im = plt.contourf(dttime, z, np.transpose(mdl), levels, extend='both')
    elif ptype == 'scatter':
        nz = len(z)
        nt = len(dttime)
        for i in range(nz):
            yy = np.ones([nt,1])
            im = plt.scatter(dttime, yy*z[i], c=mdl[:,i], s=1,
                    vmin=c_min, vmax=c_max)
            plt.xlim([dttime[0], dttime[-1]])
            plt.ylim([min(z),max(z)])
    else:
        # pcolor by default
        im = plt.pcolor(dttime, z, np.transpose(mdl), vmin=c_min, vmax=c_max)
    # auto adjust the x-axis label
    plt.gcf().autofmt_xdate()
    plt.ylabel('Depth (m)')
    cb = plt.colorbar(im)

    # scientific notation for colorbar labels
    cb.formatter.set_powerlimits((-2, 2))
    cb.update_ticks()

    # set figure size
    fig_height = 3
    fig_width = 6
    f = plt.gcf()
    f.set_size_inches(fig_width, fig_height)

    # save figure
    if args.fname_out:
        figname = args.fname_out
    else:
        figname = args.vname

    plt.savefig(figname)

def set_levels(data):
    """Set contour levels by the 99th and 1st percentiles of the data.

    :data: (list, numpy array) array of data

    """
    # round off
    c_max = float(format(np.nanpercentile(data, 99), '.1e'))
    c_min = float(format(np.nanpercentile(data, 1), '.1e'))
    dsub = 0
    # if c_max equals c_min, check more digits
    if c_max == c_min:
        data_new = data
        while c_max == c_min:
            dsub +=c_max
            data_new = data_new-c_max
            c_max = float(format(np.nanpercentile(data_new, 99), '.1e'))
            c_min = float(format(np.nanpercentile(data_new, 1), '.1e'))
    # set 20 levels
    c_int = (c_max-c_min)/20
    levels = np.arange(c_min, c_max+c_int, c_int)+dsub
    return levels

if __name__ == "__main__":
    main()
