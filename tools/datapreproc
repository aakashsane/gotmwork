#!/usr/bin/env python3
'''
Qing Li, 20171103
'''
import sys
import os
import re
import argparse
import datetime
from netCDF4 import Dataset, num2date, date2index

def main():
    # # process the input arguments
    parser = argparse.ArgumentParser(description='''
            Preprocessing the input data for GOTM from observations.''')
    # parser.add_argument('-', '--case', action='store', dest='case',
    #         metavar='FILENAME', required=True, help='Input namelist file name')
    parser.add_argument('-ds', '--date_start', action='store', dest='date_start',
            metavar='STARTDATE', required=True,
            help='Starting date of input data, in the format of YYYYMMDD')
    parser.add_argument('-de', '--date_end', action='store', dest='date_end',
            metavar='ENDDATE', required=True,
            help='Ending date of input data, in the format of YYYYMMDD')
    parser.add_argument('--version', action='version', version='%(prog)s: 1.0')
    # parsing arguments and save to args
    args=parser.parse_args()

    # get home directory
    home = os.environ.get('HOME')
    obsdir = home+'/data/OCSPapa/2016'
    infile_surfix = '50n145w_hr.cdf'
    fname_wind = 'wind_10meter_'+infile_surfix
    fname_ps = 'bp'+infile_surfix
    fname_t2 = 'airt_2meter_'+infile_surfix
    fname_rh = 'rh'+infile_surfix
    vname_u10 = 'UZS_2422'
    vname_v10 = 'VZS_2423'
    vname_ps = 'BP_915'
    vname_t2 = 'TZS_2521'
    vname_rh = 'RH_910'
    outname = 'meteo.dat'
    date_start = '20160324'
    date_end = '20160411'

    # read dimensions
    nclat, nclon, nctime = ncread(obsdir+'/'+fname_wind,
            'lat', 'lon', 'time', valueonly=False)
    lat, lon = nclat[:], nclon[:]   # nc object to array
    dttime = convert_nctime(nctime) # time in datetime format
    # get time range indices
    dt_start = datetime.datetime.strptime(date_start, '%Y%m%d')
    dt_end = datetime.datetime.strptime(date_end, '%Y%m%d')
    tidx_start, tidx_end = date2index([dt_start, dt_end], nctime)
    tdat = [dttime[i].isoformat(' ', 'seconds')
            for i in range(tidx_start, tidx_end)] # truncated to seconds
    # read variables
    u10, v10 = ncread(obsdir+'/'+fname_wind, vname_u10, vname_v10,
            tidxstart=tidx_start, tidxend=tidx_end)
    ps = ncread(obsdir+'/'+fname_ps, vname_ps,
            tidxstart=tidx_start, tidxend=tidx_end)
    t2 = ncread(obsdir+'/'+fname_t2, vname_t2,
            tidxstart=tidx_start, tidxend=tidx_end)
    rh = ncread(obsdir+'/'+fname_rh, vname_rh,
            tidxstart=tidx_start, tidxend=tidx_end)
    nt = len(tdat[:])
    cc = t2*0.0

    # write to output file
    # meteo.dat
    with open(outname, 'w') as fout:
        for i in range(0, nt):
            fout.write(
                '{0} {1:6.2f} {2:6.2f} {3:6.1f} {4:6.2f} {5:6.2f} {6:4.2f}\n'
                .format(tdat[i], u10[i], v10[i], ps[i], t2[i], rh[i], cc[i]))


def convert_nctime(nctime):
    '''
    Convert from nctime object to datetime object.
    '''
    t_units = nctime.units
    try :
        t_cal = nctime.calendar
    except AttributeError : # gregorian if attribute doesn't exist
        t_cal = 'gregorian'
    return num2date(nctime[:], units = t_units, calendar = t_cal)

def ncread(ncfile, *argv, valueonly=True, tidxstart=0, tidxend=-1):
    '''
    Read variables from a netCDF file.
    '''
    infile = Dataset(ncfile, 'r')
    nargv = len(argv)
    rdat = []
    if valueonly:
        for vname in argv:
            dat = infile.variables[vname]
            rdat.append(dat[tidxstart:tidxend,0,0,0])
    else:
        for vname in argv:
            dat = infile.variables[vname]
            rdat.append(dat)

    # return a list of arrays if more than one variable are requested
    if len(rdat) == 1:
        return rdat[0]
    else:
        return rdat

if __name__ == "__main__":
    main()
